<?php
// $Id: jsonrpc_server.module,v 1.1.2.2 2010/02/15 13:06:21 hugowetterberg Exp $

function jsonrpc_server_server_info() {
  return array(
    '#name' => 'JSON-RPC',
    '#path' => 'json-rpc',
  );
}

function jsonrpc_server_server() {
  require_once('JsonRpcServer.php');
  $GLOBALS['devel_shutdown'] = false;

  // TODO: Add settings page with options for disabling features that doesn't
  // follow the JSON-RPC spec. One thing that definitely could be disabled is
  // the GET request handling, regardless of conformance to spec.

  $method = $_SERVER['REQUEST_METHOD'];
  switch ($method) {
    case 'POST':
      // Omit charset parameter
      list($content_type) = explode(';', $_SERVER['CONTENT_TYPE'], 2);

      switch($content_type) {
        // Handling of a standard JSON-RPC call
        case 'application/json':
          // We'll use the inputstream module if it's installed because
          // otherwise it's only possible to read the input stream once.
          // And other parts of services or drupal might want to access it.
          if (module_exists('inputstream')) {
            $body = file_get_contents('drupal://input');
          }
          else {
            $body = file_get_contents('php://input');
          }
          $in = json_decode($body, TRUE);
        break;
        // It's not included in the JSON-RPC standard but we support
        // sending only the params as JSON.
        default:
          $in = $_POST;
          $in['params'] = json_decode($in['params'], TRUE);
        break;
      }
      break;
    case 'GET':
      // This handling of get requests doesn't implement the JSON-RPC spec
      // fully. Multiple parameters sharing names are not collapsed into
      // arrays. See
      // http://json-rpc.org/wd/JSON-RPC-1-1-WD-20060807.html#GetProcedureCall
      // for details.
      // TODO: Implement custom GET-parameter parsing
      $in = array(
        'jsonrpc' => '1.1',
        'method' => basename($_GET['q']),
        'params' => $_GET,
      );
    break;
  }

  $in['method'] = trim($in['method'], ' "');
  $server = new JsonRpcServer($in);
  return $server->handle();
}

function jsonrpc_server_add_javascript() {
  $path = drupal_get_path("module", "jsonrpc_server");
  drupal_add_js($path ."/jsonrpc_server.js");
}